// Generated by gencpp from file subt_msgs/AnchorBallDetection.msg
// DO NOT EDIT!


#ifndef SUBT_MSGS_MESSAGE_ANCHORBALLDETECTION_H
#define SUBT_MSGS_MESSAGE_ANCHORBALLDETECTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>

namespace subt_msgs
{
template <class ContainerAllocator>
struct AnchorBallDetection_
{
  typedef AnchorBallDetection_<ContainerAllocator> Type;

  AnchorBallDetection_()
    : stamp()
    , robot_id(0)
    , anchorball_id(0)
    , pose()  {
    }
  AnchorBallDetection_(const ContainerAllocator& _alloc)
    : stamp()
    , robot_id(0)
    , anchorball_id(0)
    , pose(_alloc)  {
  (void)_alloc;
    }



   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef int32_t _robot_id_type;
  _robot_id_type robot_id;

   typedef int32_t _anchorball_id_type;
  _anchorball_id_type anchorball_id;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_type;
  _pose_type pose;





  typedef boost::shared_ptr< ::subt_msgs::AnchorBallDetection_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::subt_msgs::AnchorBallDetection_<ContainerAllocator> const> ConstPtr;

}; // struct AnchorBallDetection_

typedef ::subt_msgs::AnchorBallDetection_<std::allocator<void> > AnchorBallDetection;

typedef boost::shared_ptr< ::subt_msgs::AnchorBallDetection > AnchorBallDetectionPtr;
typedef boost::shared_ptr< ::subt_msgs::AnchorBallDetection const> AnchorBallDetectionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::subt_msgs::AnchorBallDetection_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::subt_msgs::AnchorBallDetection_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::subt_msgs::AnchorBallDetection_<ContainerAllocator1> & lhs, const ::subt_msgs::AnchorBallDetection_<ContainerAllocator2> & rhs)
{
  return lhs.stamp == rhs.stamp &&
    lhs.robot_id == rhs.robot_id &&
    lhs.anchorball_id == rhs.anchorball_id &&
    lhs.pose == rhs.pose;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::subt_msgs::AnchorBallDetection_<ContainerAllocator1> & lhs, const ::subt_msgs::AnchorBallDetection_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace subt_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::subt_msgs::AnchorBallDetection_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::subt_msgs::AnchorBallDetection_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::subt_msgs::AnchorBallDetection_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::subt_msgs::AnchorBallDetection_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::subt_msgs::AnchorBallDetection_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::subt_msgs::AnchorBallDetection_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::subt_msgs::AnchorBallDetection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "26c4aa21e931afcad781619924ee252c";
  }

  static const char* value(const ::subt_msgs::AnchorBallDetection_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x26c4aa21e931afcaULL;
  static const uint64_t static_value2 = 0xd781619924ee252cULL;
};

template<class ContainerAllocator>
struct DataType< ::subt_msgs::AnchorBallDetection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "subt_msgs/AnchorBallDetection";
  }

  static const char* value(const ::subt_msgs::AnchorBallDetection_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::subt_msgs::AnchorBallDetection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time stamp\n"
"int32 robot_id\n"
"int32 anchorball_id\n"
"geometry_msgs/Pose pose\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::subt_msgs::AnchorBallDetection_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::subt_msgs::AnchorBallDetection_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp);
      stream.next(m.robot_id);
      stream.next(m.anchorball_id);
      stream.next(m.pose);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AnchorBallDetection_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::subt_msgs::AnchorBallDetection_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::subt_msgs::AnchorBallDetection_<ContainerAllocator>& v)
  {
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "robot_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.robot_id);
    s << indent << "anchorball_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.anchorball_id);
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SUBT_MSGS_MESSAGE_ANCHORBALLDETECTION_H
