// Generated by gencpp from file subt_msgs/frame_switchRequest.msg
// DO NOT EDIT!


#ifndef SUBT_MSGS_MESSAGE_FRAME_SWITCHREQUEST_H
#define SUBT_MSGS_MESSAGE_FRAME_SWITCHREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace subt_msgs
{
template <class ContainerAllocator>
struct frame_switchRequest_
{
  typedef frame_switchRequest_<ContainerAllocator> Type;

  frame_switchRequest_()
    : frame()  {
    }
  frame_switchRequest_(const ContainerAllocator& _alloc)
    : frame(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _frame_type;
  _frame_type frame;





  typedef boost::shared_ptr< ::subt_msgs::frame_switchRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::subt_msgs::frame_switchRequest_<ContainerAllocator> const> ConstPtr;

}; // struct frame_switchRequest_

typedef ::subt_msgs::frame_switchRequest_<std::allocator<void> > frame_switchRequest;

typedef boost::shared_ptr< ::subt_msgs::frame_switchRequest > frame_switchRequestPtr;
typedef boost::shared_ptr< ::subt_msgs::frame_switchRequest const> frame_switchRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::subt_msgs::frame_switchRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::subt_msgs::frame_switchRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::subt_msgs::frame_switchRequest_<ContainerAllocator1> & lhs, const ::subt_msgs::frame_switchRequest_<ContainerAllocator2> & rhs)
{
  return lhs.frame == rhs.frame;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::subt_msgs::frame_switchRequest_<ContainerAllocator1> & lhs, const ::subt_msgs::frame_switchRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace subt_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::subt_msgs::frame_switchRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::subt_msgs::frame_switchRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::subt_msgs::frame_switchRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::subt_msgs::frame_switchRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::subt_msgs::frame_switchRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::subt_msgs::frame_switchRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::subt_msgs::frame_switchRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a054304ca480f0e0c67ec5f261591b09";
  }

  static const char* value(const ::subt_msgs::frame_switchRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa054304ca480f0e0ULL;
  static const uint64_t static_value2 = 0xc67ec5f261591b09ULL;
};

template<class ContainerAllocator>
struct DataType< ::subt_msgs::frame_switchRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "subt_msgs/frame_switchRequest";
  }

  static const char* value(const ::subt_msgs::frame_switchRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::subt_msgs::frame_switchRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#Request data\n"
"string frame # for switch frame\n"
;
  }

  static const char* value(const ::subt_msgs::frame_switchRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::subt_msgs::frame_switchRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.frame);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct frame_switchRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::subt_msgs::frame_switchRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::subt_msgs::frame_switchRequest_<ContainerAllocator>& v)
  {
    s << indent << "frame: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.frame);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SUBT_MSGS_MESSAGE_FRAME_SWITCHREQUEST_H
