// Generated by gencpp from file subt_msgs/reportRequest.msg
// DO NOT EDIT!


#ifndef SUBT_MSGS_MESSAGE_REPORTREQUEST_H
#define SUBT_MSGS_MESSAGE_REPORTREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <subt_msgs/ArtifactPose.h>

namespace subt_msgs
{
template <class ContainerAllocator>
struct reportRequest_
{
  typedef reportRequest_<ContainerAllocator> Type;

  reportRequest_()
    : artifact()  {
    }
  reportRequest_(const ContainerAllocator& _alloc)
    : artifact(_alloc)  {
  (void)_alloc;
    }



   typedef  ::subt_msgs::ArtifactPose_<ContainerAllocator>  _artifact_type;
  _artifact_type artifact;





  typedef boost::shared_ptr< ::subt_msgs::reportRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::subt_msgs::reportRequest_<ContainerAllocator> const> ConstPtr;

}; // struct reportRequest_

typedef ::subt_msgs::reportRequest_<std::allocator<void> > reportRequest;

typedef boost::shared_ptr< ::subt_msgs::reportRequest > reportRequestPtr;
typedef boost::shared_ptr< ::subt_msgs::reportRequest const> reportRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::subt_msgs::reportRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::subt_msgs::reportRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::subt_msgs::reportRequest_<ContainerAllocator1> & lhs, const ::subt_msgs::reportRequest_<ContainerAllocator2> & rhs)
{
  return lhs.artifact == rhs.artifact;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::subt_msgs::reportRequest_<ContainerAllocator1> & lhs, const ::subt_msgs::reportRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace subt_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::subt_msgs::reportRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::subt_msgs::reportRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::subt_msgs::reportRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::subt_msgs::reportRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::subt_msgs::reportRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::subt_msgs::reportRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::subt_msgs::reportRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "30502186e4f3b4efefe5fcdb32980b4d";
  }

  static const char* value(const ::subt_msgs::reportRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x30502186e4f3b4efULL;
  static const uint64_t static_value2 = 0xefe5fcdb32980b4dULL;
};

template<class ContainerAllocator>
struct DataType< ::subt_msgs::reportRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "subt_msgs/reportRequest";
  }

  static const char* value(const ::subt_msgs::reportRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::subt_msgs::reportRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#Request data\n"
"ArtifactPose artifact\n"
"\n"
"================================================================================\n"
"MSG: subt_msgs/ArtifactPose\n"
"string Class\n"
"#string status				# O for non_return , X for return \n"
"int32 appear_count\n"
"float64 probability\n"
"geometry_msgs/Pose pose\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::subt_msgs::reportRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::subt_msgs::reportRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.artifact);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct reportRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::subt_msgs::reportRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::subt_msgs::reportRequest_<ContainerAllocator>& v)
  {
    s << indent << "artifact: ";
    s << std::endl;
    Printer< ::subt_msgs::ArtifactPose_<ContainerAllocator> >::stream(s, indent + "  ", v.artifact);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SUBT_MSGS_MESSAGE_REPORTREQUEST_H
